# Report generation utilities for WebShield Scanner

import os
from datetime import datetime
from .error_handler import ReportGenerationError

def generate_html_report(txt_file_path, scan_info):
    """Generate an HTML report from a text file"""
    try:
        html_file_path = txt_file_path.replace('.txt', '.html')
        
        with open(txt_file_path, 'r') as txt_file:
            content = txt_file.read()
        
        # Format timestamp
        timestamp_str = scan_info.get('timestamp', '')
        try:
            formatted_date = datetime.strptime(timestamp_str, "%Y%m%d_%H%M%S").strftime("%Y-%m-%d %H:%M:%S")
        except:
            formatted_date = timestamp_str
        
        # Create HTML content
        html_content = f"""
        <!DOCTYPE html>
        <html>
        <head>
            <title>{scan_info.get('scan_type', '').capitalize()} Scan Report</title>
            <style>
                body {{ font-family: Arial, sans-serif; margin: 20px; }}
                h1 {{ color: #2c3e50; }}
                h2 {{ color: #3498db; margin-top: 20px; }}
                pre {{ background-color: #f8f9fa; padding: 15px; border-radius: 5px; overflow-x: auto; }}
                .info {{ margin-bottom: 20px; background-color: #f1f5f9; padding: 15px; border-radius: 5px; }}
                .info p {{ margin: 5px 0; }}
                .success {{ color: #27ae60; }}
                .warning {{ color: #f39c12; }}
                .error {{ color: #e74c3c; }}
                .footer {{ margin-top: 30px; font-size: 0.8em; color: #7f8c8d; text-align: center; }}
            </style>
        </head>
        <body>
            <h1>{scan_info.get('scan_type', '').capitalize()} Scan Report</h1>
            <div class="info">
                <p><strong>Target:</strong> {scan_info.get('target', 'N/A')}</p>
                <p><strong>Date:</strong> {formatted_date}</p>
                <p><strong>Scan Type:</strong> {scan_info.get('scan_type', 'N/A')}</p>
                {f"<p><strong>Scan Option:</strong> {scan_info.get('scan_option', 'N/A')}</p>" if scan_info.get('scan_option') else ""}
                <p><strong>Status:</strong> {scan_info.get('status', 'N/A')}</p>
            </div>
            
            <h2>Scan Results</h2>
            <pre>{content}</pre>
            
            <div class="footer">
                <p>Generated by WebShield Scanner</p>
            </div>
        </body>
        </html>
        """
        
        with open(html_file_path, 'w') as html_file:
            html_file.write(html_content)
            
        return html_file_path
    
    except Exception as e:
        raise ReportGenerationError(f"Failed to generate HTML report: {str(e)}")

def get_report_file(scan_id, scan_results, format_type='txt'):
    """Get the report file in the specified format"""
    if scan_id not in scan_results:
        raise ReportGenerationError("Scan not found")
    
    # Get the original text file path
    txt_file_path = scan_results[scan_id]['file_path']
    
    if not os.path.exists(txt_file_path):
        raise ReportGenerationError("Scan result file not found")
    
    if format_type == 'txt':
        return txt_file_path
    
    elif format_type == 'html':
        # Check if HTML file already exists
        html_file_path = txt_file_path.replace('.txt', '.html')
        if os.path.exists(html_file_path):
            return html_file_path
        
        # Generate HTML file
        return generate_html_report(txt_file_path, scan_results[scan_id])
    
    else:
        raise ReportGenerationError(f"Invalid format type: {format_type}")